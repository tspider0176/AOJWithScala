main関数はただ一つのみ作られるクラス（プログラム作成の上で当然のこと）
オブジェクト指向というものは全てがオブジェクトで表現される
型からオブジェクトを作成する
つまり、クラスに対してオブジェクトの数は無限に作成できる
（たいやきの型から無限のたいやき（オブジェクト）が生成出来るのと同じ）
（設計図さえあれば後はそれから物をいくらでも作成出来るよね）

さてオブジェクトが無限に作成出来るのはいいが、
もしプログラムが無限のオブジェクトを持っている時どんな問題が発生するのか
例えば無数のオブジェクトが無数のmain関数を持っていると、
プログラムはどこから始めていいのかわからないという問題が発生する

これがオブジェクト指向においてmain関数が唯一に定まらなければいけない理由であり、
同時にscalaであのようなmain関数の書き方をする理由となる

なぜmain関数が入っているクラスはobject宣言なのか？
-> シングルトンオブジェクト
意味：インスタンスがクラス内に一つしか存在しないクラスのオブジェクト
scalaにはstaticがないため、このようなクラスを代用する必要がある。
このクラスは他クラスからのインスタンス化が禁止されている。
-> javaではprivateコンストラクタを用いることで実現している。(ノート下部参照)

つまり、
object -> インスタンスを一個しか生成しませんよ
というキーワードだと思っていい。

mainは誰からもアクセスできないといけない -> public
mainはただ一つでないといけない -> static
main関数にはargumentが複数存在している。 -> arguments
これらがmain関数を記述するにあたり書く文字の意味である。

javaでは静的なメソッドを使うことで無理やり一つに定めているが、
scalaはどのようにmain関数を定めているかが重要な点になっている

object Hello{
	def main(args: Array[String]):Unit ={
		println("Hello world")
	}
}

これから、javaは純粋なオブジェクト指向言語ではない
scalaは静的メンバーを持つことが出来ないので、その点は
javaよりもオブジェクト指向言語と言える。(コップ本より)

javaにはシングルトンパターンというものがある。
wikipediaにあるコードを解析してみる。

final class Singleton{
	private static Singleton instance;
	private Singleton(){};
	public static synchronized Singleton getInstance(){
	    if(instance == null){
	    	instance = new Singleton();
	    }
	    return instance;
	}
}

javaでのfinal class -> 継承が出来ないクラスのこと
このprivate デフォルトコンストラクタは必要
（privateをつけて他クラスからのインスタンス化を防いでいる）

平行プログラミング、マルチプログラミング
あるメソッドが動くときは他スレッドをロックしろというキーワード
「スレッド間の排他制御」

javaのクラス宣言の修飾子について
javaにおいてclass に修飾子が付いていないのは他ファイルからアクセス出来なくなる
publicはどこのクラスからもアクセス可能
privateは自クラスとその継承関係のクラスのみ

Array[String] <- Stringのことをジェネリクスと呼ぶ。

継承関係（親子関係）
親は親が生まれた時点で子供を見ることができるか -> No
子供は生まれた瞬間親を見ることが出来るか -> Yes
見れる方向に矢印が付いている
クラスの継承関係の矢印の向きはその意味

-> Java陰陽術
javaの型変数は常に非変になる
逆に配列は常に共変
共変なので親が同じobjectの場合代入できてしまう
つまりコンパイルは通るのに実行時にエラー発生
-> Javaはクソ
-> Javaで配列は今後一切使うな

scalaのhello worldで利用されている
println
これは実は
-> import scala.Predef
がデフォルトでインポートされているため
性格に記述する場合、
scala.Predef.println("Hello world!")

コンパイル後に生成される$Helloというファイルとは？
scalaは全てjavaでコードができているので
scalaコンパイル時には一回全部コードをjavaに変換する
。。。
シングルトンパターンを行っているクラスに$がつく
helloクラスの場合はhelloクラスでシングルトンオブジェクトが定義されているので
そのクラスであるHello.classに$付きのファイルが生成される。

キーワード：ファクトリーメソッドパターン
ファクトリー「工場」の名前の通り、
オブジェクトを生成する工場を別に生成することによって、
オブジェクトの生成と使用を分離し、クラスの再利用性を高めることが可能。

classの引数について
valをつけると、フィールドを用意してgetterを用意する
scalaにてsetterを使うにはvarを使えば良い。

クラスを呼び出すときにtoString()が暗黙的に呼び出されて実行される
println(new Hoge(1,"abc"))
toString()は特殊なメソッドなのでよく復習しておくように

(追記)-> toString()について
なんのために作られたメソッド？
-> デバッグ出力やログ、テストのエラーレポート、インタプリタやデバッガの出力
として使用することができる情報を生成する事で
プログラマの役に立つことを目的としたメソッド(コップ本より)

toStringオーバーライドのやり方(一般に他のメソッドオーバーライドも同じ)は、
override def toString = "Hello${value or variable name}"

toStringの戻り値はString型、
printlnの戻り値はUnit型です（半ギレ）
toStringをオーバーライドして中にprintlnを実装しても意味ありません（全ギレ）

フィールドの名前や関数名の先頭に大文字を使うのはやめましょう。
通例クラスの名前の先頭文字のみが大文字になるべきであり、
プログラムの可読性を著しく下げるようなコードは書くべきではありません。
他人が読むことを考えて、絶対可読性の高いコードを書こうな？
同じく可視性についても

mapやfilterは特殊なメソッド
引数に関数を持っているもの（今すぐ使えと言われたら使えないよね）
値として関数を使っている

REPL上で
func(x:Int) => x * 2
func(x:Int) => if(x % 2 == 0)
List(1,2,3).map(func)
List(1,2,3).filter(func)
で確かめるとわかる

% (1 to 100).toList.map(num:Int) => num + rand.nextInt(101).filter( _ % 2 == 0)

%(0 until 100)で0~99

ところで
REPL = Read Eval Print Loop
と言うことを忘れずに。

mkstringメソッド
名前の通りStringを生成する。

OR自体に遅延が発生するので、先に左の方の式がtrueになってしまうと
右の式が評価される前にtrueになってしまうので、特定のパターンのときうまくいかない
-> 数字が昇順で絵柄が昇順になっていないとき

セミコロン推論
ワンライナープログラマーの人とか
明示的に入れる時は一行でプログラムを記述したいときなど限定される

クラスとオブジェクトに同じ名前をつけている
-> コンパニオンオブジェクト
クラスとそのコンパニオンオブジェクトは、
互いのクラスのプライべートメンバーにアクセスすることが出来る

可変コレクションと非可変コレクション
ミュータブルとイミュータブル

アプリケーショントレイト
詳しい説明は後で
mainメソッドに用いる場合もある
何を言っているのか

本もっと読みこめ

課題の答え
https://gist.github.com/ababup1192/30d3607259dcfe351910

⚪︎⚪︎⚪︎調べてみた⚪︎⚪︎⚪︎
-> アプレケーショントレイト
これを用いるとAppトレイトが自動的に正しいシグネチャのmain関数を宣言して
それをシングルトンオブジェクトが継承してくれる。

つまり、コップ本勉強の現段階では
main関数はシングルトンオブジェクトを宣言して
その内部にmain関数を記述しているが、
appトレイトを用いるとそれすらも記述しなくてもいいことになる。
とてつもない省略

アプリケーショントレイトの利用方法は、
あるobjectクラスクラス宣言の部分で部分にAppを継承するだけ
これをするだけで、そのシングルトンオブジェクトの中にある基本コンストラクタの
内部に記述されているコードが自動的にmain関数として認識される。
